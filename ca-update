#!/usr/bin/env bash

# vim: set noet syn=bash ft=sh ff=unix fenc=utf-8 ts=4 sw=0 : # GPP default modeline for bash script
# shellcheck shell=bash disable=SC1091,SC2155,SC3010,SC3021,SC3037 source=${GPP_HOME}

VERSION="20250328-1"

TARGET_DIR="/usr/local/share/ca-certificates"

# TODO: Automatically detects the renewal of the certificates
# Expiration: R10, R11, E5, E6: 2027-03-12
TARGET_URL_L=(
	https://letsencrypt.org/certs/2024/e5.pem
	https://letsencrypt.org/certs/2024/e6.pem
	https://letsencrypt.org/certs/2024/r10.pem
	https://letsencrypt.org/certs/2024/r11.pem
)
TARGET_FILE="temp.pem"
DLBIN=""

function gen_filename() {
	local cert_file="${1}"
	[[ -z ${cert_file} ]] && exit 61

	local subject=$(openssl x509 -in "$cert_file" -noout -subject)

	# remove "subject= "
	subject=${subject#subject= }

	# generate a file name
	filename=$(
	echo "$subject" |
		tr ',' '\n' |                    # devide by comma
		sed 's/^ *//; s/ *$//' |         # delete trailing whitespaces
		grep -v ' *C *= *' |             # remove "C = "
		awk -F'= *' '{print $2}' |       # extract values
		paste -sd- |                     # concat with haiphen
		tr ' ' '-' |                     # convert remaining spaces to slash
		tr -d "\\/:*?\"<>|'" |           # remove special characters
		tr '[:upper:]' '[:lower:]'       # decapitalization
	)

	# because update-ca-certificates only recognizes *.crt files
	filename="${filename}.crt"

	echo "$filename"
}

function gen_hash() {
	local cert_file="${1}"
	[[ -z ${cert_file} ]] && exit 62

	local tmp_hash=$(openssl x509 -in "$cert_file" -noout -subject_hash)
	[[ -z ${tmp_hash} ]] && exit 63

	echo "${tmp_hash}"
}

get_uniqname() {
  [[ -z "$1" ]] && exit 64
  local hex="$1"
  local i=0
  while [[ -e "${hex}.${i}" ]]; do
    ((i++))
  done
  echo "${hex}.${i}"
}

echo "--- Debian/Ubuntu CA certificate update utility for Let's Encrypt. ---"
echo "Version: ${VERSION}"
echo "Checking prerequisites..."
if ! id | grep "root" >& /dev/null; then
	echo "Error: This utility needs root privilege."
	exit 4
fi


if ! dpkg -L ca-certificates >& /dev/null; then
	echo "Error: Package 'ca-certificates' isn't instaled."
	echo 2;
fi

[[ -z "${DLBIN}" ]] && which curl >& /dev/null && DLBIN="curl"
[[ -z "${DLBIN}" ]] && which wget >& /dev/null && DLBIN="wget"

if [[ -z "${DLBIN}" ]]; then
	echo "Error: Both curl nor wget found."
	exit 1
fi

echo "OK."

echo "Downloading the new CA certificate."
cd "${TARGET_DIR}" || exit 3

for target in "${TARGET_URL_L[@]}"; do
	echo "${target}"
	case "${DLBIN}" in
		curl )
			echo "  downloading by curl..."
			http_status=$(curl -4 -s -w "%{http_code}" -o "${TARGET_FILE}" "${target}")
			if [[ ${http_status} != 200 ]] ; then
				echo "Error: curl can't download the new CA certificate (http status code ${http_status})."
				exit 51
			fi
			;;
		wget )
			echo "  downloading by wget..."
			if ! wget -4 -q -O "${TARGET_FILE}" "${target}" || [[ ! -s ${TARGET_FILE} ]]; then
				echo "Error: wget can't download the new CA certificate."
				exit 52
			fi
			;;
	esac
	if [[ -s ${TARGET_FILE} ]]; then
		echo "  changing filename..."
		tgt_filename=$(gen_filename ${TARGET_FILE})
		# tgt_hash=$(gen_hash ${TARGET_FILE})
		# tgt_hashname=$(get_uniqname ${tgt_hash})

		cp "${TARGET_FILE}" "${tgt_filename}" || exit 53
		# ln -s "${tgt_filename}" "${tgt_hashname}" || exit 54
		rm -f "${TARGET_FILE}"
	else
		echo "Error: CA certfile wasn't downloaded."
		exit 5
	fi
done

echo "Download done. Updating system configuration."
if ! update-ca-certificates; then
	echo "Error: System configuration couldn't be updated."
	exit 6
fi

echo
echo "All done."

